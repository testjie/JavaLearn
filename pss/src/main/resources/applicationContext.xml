<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
 http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop.xsd
 http://www.springframework.org/schema/data/jpa 
 http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
 ">
    <!-- Spring的扫描功能 -->
    <context:component-scan base-package="cn.itblacklist.pss"/>

    <!-- jdb的路径和数据源 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--maxActive: 最大连接数量 -->
        <property name="maxActive" value="150"/>
        <!--minIdle: 最小空闲连接 -->
        <property name="minIdle" value="5"/>
        <!--maxIdle: 最大空闲连接 -->
        <property name="maxIdle" value="20"/>
        <!--initialSize: 初始化连接 -->
        <property name="initialSize" value="30"/>
        <!-- 用来配置数据库断开后自动连接的 -->
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--removeAbandoned: 是否自动回收超时连接 -->
        <property name="removeAbandoned" value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
        <property name="removeAbandonedTimeout" value="10"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
        <property name="maxWait" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
        <property name="minEvictableIdleTimeMillis" value="10000"/>
        <property name="validationQuery" value="SELECT NOW() FROM DUAL"/>
    </bean>

    <!--
        Spring主动集成JPA
        配置:EntityManagerFactory
            1.EntityManagerFactory这个对象是JPA中
            2.这个对象是无法直接new出来的
                org.springframework.orm.jpa.LocalEntityManagerFactoryBean(不要选)
                org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean
            EntityManagerFactory -> 需要连接数据库的信息(dataSource这个连接池中已经有了，引入即可)
     -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 连接池引入 -->
        <property name="dataSource" ref="dataSource"/>
        <!--
            昨天我们学了一个扫描包的标签
            扫描包的配置 -> 扫描JPA的注解(都在domain中)
         -->
        <property name="packagesToScan" value="cn.itblacklist.pss.domain"/>
        <!--
            jpaVendorAdapter:jpa适配器
                jpa只是一个规范，它是由各大ORM厂商来实现的
                现在我Spring要集成jpa,我就需要确定是由哪一个厂商的实现来完成的(我们会选择hibernate)
         -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!--
                    接下来我们要配置方言，建表策略等...
                 -->
                <!-- 配置方言 -->
                <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"/>
                <!-- 是否支持建表语句  如果选择的是true,它就相当于我们之前的update方案 -->
                <property name="generateDdl" value="false"/>
                <!-- 是否显示sql语句 -->
                <property name="showSql" value="true"/>
            </bean>
        </property>
    </bean>

    <!--
        Spring Data是Spring下的一个子项目(可以让我们很方便的操作关系型数据库，非关系型数据库)
        Spring Data Jpa 又是SpringData的一个子项目
        Spring Data Jpa配置 ********************************************

        base-package:仓库层的位置
                SpringData会去扫描对应的位置，如果发现某一个接口继承了Repository
                它就会自动帮咱们这个接口完成实现类，并且这个类完成了CRUD
        transaction-manager-ref:引用相应的事务
        entity-manager-factory-ref:引用的EntityMangerFactory
        repository-impl-postfix:"impl"
    -->
    <!-- base-package:扫描的包 -->
    <jpa:repositories base-package="cn.itblacklist.pss.repository" transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"
                      factory-class="cn.itblacklist.pss.repository.BaseRepositoryFactoryBean"
    />


    <!--
        配置JPA的事务管理器
        事务管理器标准名称:transactionManager
    -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <!-- 开启事务的注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>














